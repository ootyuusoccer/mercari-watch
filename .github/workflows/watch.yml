name: Mercari Watch

on:
  schedule:
    - cron: "*/15 * * * *"   # 15分ごと
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-22.04   # ← 22.04固定で依存解決

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install packages
        run: npm i -D playwright@1.48.2 node-fetch@3.3.2 nodemailer@6.9.13

      - name: Install Playwright browsers & deps
        run: npx playwright install --with-deps chromium

      - name: Run Mercari Watcher
        env:
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}   # 送信元Gmailアドレス
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}   # アプリパスワード
          MAIL_TO:       ${{ secrets.MAIL_TO }}         # 受信先
        shell: bash
        run: |
          node <<'EOF'
          import fs from 'fs';
          import fetch from 'node-fetch';
          import { chromium } from 'playwright';
          import nodemailer from 'nodemailer';

          // ===== 設定 =====
          const TARGETS_CSV = 'targets.csv';
          const STATE_FILE  = 'last_seen.json';
          const TIMEOUT_MS  = 45_000;        // ページ読み込みタイムアウト
          const HEADLESS    = true;

          // ===== ユーティリティ =====
          const sleep = ms => new Promise(r => setTimeout(r, ms));
          function parseCsv(text){
            return text.split(/\r?\n/).filter(l=>l.trim())
              .map((l,idx)=>{
                // name,url,max_price の3列。カンマは2つだけ許可
                const m = l.match(/^([^,]+),([^,]+),([^,]+)$/);
                if(!m) throw new Error(`CSV 行${idx+1}が不正: ${l}`);
                return { name: m[1].trim(), url: m[2].trim(), max: parseInt(m[3],10) };
              });
          }
          function ensureNewestSort(u){
            // created_time desc を強制付与
            const hasSort = /[?&]sort=created_time(&|$)/.test(u);
            const hasOrder = /[?&]order=desc(&|$)/.test(u);
            let url = new URL(u);
            if(!hasSort)  url.searchParams.set('sort','created_time');
            if(!hasOrder) url.searchParams.set('order','desc');
            return url.toString();
          }

          // ===== 読み込み =====
          if(!fs.existsSync(TARGETS_CSV)) throw new Error('targets.csv がありません');
          const targets = parseCsv(fs.readFileSync(TARGETS_CSV, 'utf8')).map(t=>({
            ...t, url: ensureNewestSort(t.url)
          }));
          let state = {};
          if(fs.existsSync(STATE_FILE)){
            try { state = JSON.parse(fs.readFileSync(STATE_FILE,'utf8')); } catch {}
          }

          // ===== Gmail 送信器 =====
          const { MAIL_USERNAME, MAIL_PASSWORD, MAIL_TO } = process.env;
          const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: { user: MAIL_USERNAME, pass: MAIL_PASSWORD }
          });
          async function notify(subject, html){
            if(!MAIL_TO || !MAIL_USERNAME || !MAIL_PASSWORD){
              console.log('⚠️ メール設定が未入力のため通知スキップ');
              return;
            }
            await transporter.sendMail({
              from: MAIL_USERNAME,
              to: MAIL_TO,
              subject,
              html
            });
          }

          // ===== クロール本体 =====
          const browser = await chromium.launch({ headless: HEADLESS });
          const ctx = await browser.newContext({
            userAgent:
              'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124 Safari/537.36',
            locale: 'ja-JP'
          });

          const results = [];
          for(const t of targets){
            console.log(`🔎 Checking: ${t.name}`);
            const page = await ctx.newPage();
            page.setDefaultTimeout(TIMEOUT_MS);

            try{
              await page.goto(t.url, { waitUntil: 'domcontentloaded' });

              // Next.js の __NEXT_DATA__ から検索結果を取得（entities:searchの反映済みJSONが入る）
              const data = await page.evaluate(()=>{
                const s = document.querySelector('#__NEXT_DATA__');
                if(!s) return null;
                try{ return JSON.parse(s.textContent); }catch{ return null; }
              });

              let first = null;

              // ① __NEXT_DATA__ に items がある場合（優先）
              if(data){
                // 深い階層から items を探す
                const stack = [data];
                while(stack.length){
                  const v = stack.pop();
                  if(v && typeof v==='object'){
                    if(Array.isArray(v)){
                      for(const x of v) stack.push(x);
                    }else{
                      if(v.items && Array.isArray(v.items) && v.items.length){
                        first = v.items[0];
                        break;
                      }
                      for(const k of Object.keys(v)) stack.push(v[k]);
                    }
                  }
                }
              }

              // ② フォールバック：/m[0-9a-zA-Z]+/ を a[href] から拾う
              if(!first){
                const id = await page.evaluate(()=>{
                  const a = document.querySelector('a[href*="/item/"]');
                  if(!a) return null;
                  const m = a.getAttribute('href').match(/\/(m[0-9a-zA-Z]+)(?:\?|\/|$)/);
                  return m ? m[1] : null;
                });
                if(id){
                  first = { id, name: t.name, price: null, thumbnails: [] };
                }
              }

              if(!first){
                console.log(`⚠️ ${t.name}: 先頭商品が取得できませんでした`);
                await page.close();
                continue;
              }

              const id = first.id || first.itemId || first.item_id;
              if(!id){
                console.log(`⚠️ ${t.name}: IDが見つかりませんでした`);
                await page.close();
                continue;
              }

              const prev = state[t.name];
              if(prev && prev === id){
                console.log(`= ${t.name}: 新規なし`);
              }else{
                // 価格をHTMLからフォールバックで拾う（任意）
                let price = null;
                try{
                  price = await page.evaluate(()=>{
                    const n = document.querySelector('[data-testid="price"], [class*="Price"]');
                    if(!n) return null;
                    const s = n.textContent.replace(/[^\d]/g,'');
                    return s ? parseInt(s,10) : null;
                  });
                }catch{}

                // 通知本文
                const itemUrl = `https://jp.mercari.com/item/${id}`;
                const html = `
                  <div>
                    <div><b>${t.name}</b> に新着</div>
                    <div>ID: ${id}</div>
                    ${price ? `<div>価格: ¥${price.toLocaleString()}</div>` : ''}
                    <div><a href="${itemUrl}">${itemUrl}</a></div>
                    <div>検索: <a href="${t.url}">${t.url}</a></div>
                  </div>
                `;

                // 価格条件
                const okByPrice = (price==null) || (isFinite(t.max) && price <= t.max);
                const subject = okByPrice
                  ? `【新着】${t.name} ${price?`¥${price}`:''}`
                  : `【新着(上限超え)】${t.name} ${price?`¥${price}`:''}`;

                await notify(subject, html);
                console.log(`✅ 通知: ${t.name} id=${id}`);

                // 状態更新
                state[t.name] = id;
              }

              await page.close();
              await sleep(500);
            }catch(e){
              console.log(`❌ ${t.name} でエラー:`, e.message);
              try{ await page.close(); }catch{}
              continue;
            }
          }

          await ctx.close();
          await browser.close();

          // 状態保存
          fs.writeFileSync(STATE_FILE, JSON.stringify(state, null, 2));
          console.log('Watch 完了');
          EOF

      - name: Commit last_seen.json
        run: |
          if git status --porcelain | grep -q "last_seen.json"; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add last_seen.json
            git commit -m "chore: update last_seen.json"
            git push
          else
            echo "no changes"
          fi
