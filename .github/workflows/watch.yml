name: Mercari Watch

on:
  schedule:
    - cron: "*/15 * * * *"   # 15分ごと
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Playwright 実行に必要なライブラリを先に入れる（Ubuntu 24.04 対応）
      - name: Install Playwright (browsers)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2t64 \
            libnss3 \
            libxss1 \
            libgtk-3-0 \
            libx11-xcb1 \
            libxcb1 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libgbm1 \
            libpango-1.0-0 \
            libcairo2 \
            libatspi2.0-0 \
            libdrm2
          npm i -D playwright
          npx playwright install --with-deps chromium

      # ここで実際の監視ロジックを実行（1回の Chromium で順に巡回）
      - name: Run Mercari Watcher
        env:
          GITHUB_STEP_SUMMARY: ${{ github.step_summary }}
        run: |
          node <<'EOF'
          import fs from 'fs';
          import { chromium } from 'playwright';

          // CSV: name,url,max_price
          const csvPath = 'targets.csv';
          if (!fs.existsSync(csvPath)) {
            console.log('targets.csv がありません。'); process.exit(0);
          }
          const lines = fs.readFileSync(csvPath,'utf8')
            .split('\n').map(s=>s.trim()).filter(Boolean);
          const header = lines.shift(); // 1行目ヘッダ
          const targets = lines.map(l=>{
            const [name,url,max_price] = l.split(',');
            return { name, url, maxPrice: parseInt(max_price||'0',10) || 0 };
          });

          // 既知IDを保存するファイル
          const seenPath = 'last_seen.json';
          let seen = {};
          try { seen = JSON.parse(fs.readFileSync(seenPath,'utf8')); } catch {}

          const browser = await chromium.launch({ headless: true });
          const page = await browser.newPage();

          const foundMsgs = [];
          for (const t of targets) {
            if (!t.url) continue;
            console.log(`🔎 Checking: ${t.name}`);

            // 検索ページへ遷移
            await page.goto(t.url, { waitUntil: 'domcontentloaded', timeout: 60000 });

            // SPA が投げる API 応答を待つ（entities:search）
            let data = null;
            try {
              const resp = await page.waitForResponse(
                r => r.url().includes('/v2/entities:search') && r.ok(),
                { timeout: 15000 }
              );
              data = await resp.json();
            } catch (e) {
              console.log(`⚠️ ${t.name}: 価格情報が取得できませんでした`);
              continue;
            }

            const item = (data?.items && data.items[0]) ? data.items[0] : null;
            if (!item) { 
              console.log(`⚠️ ${t.name}: ヒット0件`); 
              continue; 
            }

            const id = item.id;
            const price = parseInt(item.price || '0',10);
            const status = item.status || '';
            const url = `https://jp.mercari.com/item/${id}`;

            // 新規出品 & 上限価格以下 & 販売中 を通知対象に
            const isNew = seen[t.name] !== id;
            const isOnSale = status.includes('TRADING') || status.includes('ON_SALE') || status === 'ITEM_STATUS_TRADING';
            const priceOk = (t.maxPrice === 0) || (price > 0 && price <= t.maxPrice);

            if (isNew && isOnSale && priceOk) {
              foundMsgs.push(`- **${t.name}** 新着: ¥${price.toLocaleString()} → ${url}`);
              seen[t.name] = id;  // 記録更新
            } else {
              // 初回実行で学習だけ／または条件合わず
              if (!seen[t.name]) seen[t.name] = id;
            }
          }

          await browser.close();

          // 結果を Summary に書く（GitHub Actions 画面で見える）
          const linesOut = [];
          if (foundMsgs.length) {
            linesOut.push('## 🛎 新着検出\n', ...foundMsgs, '\n');
          } else {
            linesOut.push('新着はありません。');
          }
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY || 'summary.md', linesOut.join('\n'));

          // 状態を保存
          fs.writeFileSync(seenPath, JSON.stringify(seen, null, 2));
          console.log('Watch 完了');
          EOF

      # 変更があれば last_seen.json をコミット（初回学習や新着時に更新）
      - name: Commit last_seen.json
        run: |
          if git status --porcelain | grep -q "last_seen.json"; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add last_seen.json
            git commit -m "chore: update last_seen.json"
            git push
          else
            echo "last_seen.json の変更なし"
          fi
